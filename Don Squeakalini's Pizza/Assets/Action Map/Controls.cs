//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Action Map/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Pizzaria Controller"",
            ""id"": ""969d07e0-645f-43a3-b401-b91fe5d65cd8"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""2818f759-cb11-4d6f-acbe-3f071f523dca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tablet"",
                    ""type"": ""Button"",
                    ""id"": ""356724b1-d96a-40dd-97da-be9bc62359ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""79b3d28e-eb03-4aa4-a033-79170f745c6e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5f5beab7-740d-44fd-832a-58bac2cb8837"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a3b08319-bc85-4b1d-8f08-5be4f1379699"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a510ab1f-450b-4d13-ab6d-d80cf68cad59"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""88e0e4d7-1d4f-4960-88ec-475fe74dbe02"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3298c7e6-fd80-49ec-8fac-a612fb7057c7"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tablet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Pizzaria Controller
        m_PizzariaController = asset.FindActionMap("Pizzaria Controller", throwIfNotFound: true);
        m_PizzariaController_Movement = m_PizzariaController.FindAction("Movement", throwIfNotFound: true);
        m_PizzariaController_Tablet = m_PizzariaController.FindAction("Tablet", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Pizzaria Controller
    private readonly InputActionMap m_PizzariaController;
    private List<IPizzariaControllerActions> m_PizzariaControllerActionsCallbackInterfaces = new List<IPizzariaControllerActions>();
    private readonly InputAction m_PizzariaController_Movement;
    private readonly InputAction m_PizzariaController_Tablet;
    public struct PizzariaControllerActions
    {
        private @Controls m_Wrapper;
        public PizzariaControllerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PizzariaController_Movement;
        public InputAction @Tablet => m_Wrapper.m_PizzariaController_Tablet;
        public InputActionMap Get() { return m_Wrapper.m_PizzariaController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PizzariaControllerActions set) { return set.Get(); }
        public void AddCallbacks(IPizzariaControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_PizzariaControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PizzariaControllerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Tablet.started += instance.OnTablet;
            @Tablet.performed += instance.OnTablet;
            @Tablet.canceled += instance.OnTablet;
        }

        private void UnregisterCallbacks(IPizzariaControllerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Tablet.started -= instance.OnTablet;
            @Tablet.performed -= instance.OnTablet;
            @Tablet.canceled -= instance.OnTablet;
        }

        public void RemoveCallbacks(IPizzariaControllerActions instance)
        {
            if (m_Wrapper.m_PizzariaControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPizzariaControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_PizzariaControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PizzariaControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PizzariaControllerActions @PizzariaController => new PizzariaControllerActions(this);
    public interface IPizzariaControllerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnTablet(InputAction.CallbackContext context);
    }
}
