//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Action Map/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Pizzaria Controller"",
            ""id"": ""969d07e0-645f-43a3-b401-b91fe5d65cd8"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""2818f759-cb11-4d6f-acbe-3f071f523dca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tablet"",
                    ""type"": ""Button"",
                    ""id"": ""356724b1-d96a-40dd-97da-be9bc62359ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""52909fa4-0922-4a7e-992c-ead9e1b09f00"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quota"",
                    ""type"": ""Button"",
                    ""id"": ""6e00bf96-71e7-476c-bfa9-5710df3f3a5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Loss"",
                    ""type"": ""Button"",
                    ""id"": ""024b924f-1516-4a6d-a092-9295d12643f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Win"",
                    ""type"": ""Button"",
                    ""id"": ""714ccf85-f20c-4e8c-bbf1-f3f3e83b196f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""79b3d28e-eb03-4aa4-a033-79170f745c6e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5f5beab7-740d-44fd-832a-58bac2cb8837"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a3b08319-bc85-4b1d-8f08-5be4f1379699"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a510ab1f-450b-4d13-ab6d-d80cf68cad59"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""88e0e4d7-1d4f-4960-88ec-475fe74dbe02"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3298c7e6-fd80-49ec-8fac-a612fb7057c7"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tablet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60319df8-5317-471e-ba44-63e9fd854fa3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a50d80df-9615-4979-afbe-8b3fb63a3075"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Loss"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5deed22-c827-4e9e-a830-e1f5b8602782"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Win"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a424720f-eeb6-4184-a041-1f980ce3d614"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quota"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""IngredientMinigame"",
            ""id"": ""116f2b8f-467c-4518-8b48-d9e27c9f8213"",
            ""actions"": [
                {
                    ""name"": ""W"",
                    ""type"": ""Button"",
                    ""id"": ""a92498f3-5600-47ed-863c-0cb84142b4ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""64af022e-944d-4b77-9160-c8317fb1dba7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""S"",
                    ""type"": ""Button"",
                    ""id"": ""c5850958-530b-4d07-83e2-388a55a535d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D"",
                    ""type"": ""Button"",
                    ""id"": ""4d420a7b-72c4-48fe-91a5-54f2c1830fb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be24cb3c-15b7-4e3a-add0-99614de3f6d3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""W"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30b0f519-34b7-45a1-b4e4-8003da04a395"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03308965-d3c8-4c2b-add3-75903fc64bcb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""S"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08e2ce43-e894-4868-9d02-f407dddf7536"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OvenMinigame"",
            ""id"": ""91d294f8-9147-40ec-baf2-f0d3e96a0640"",
            ""actions"": [
                {
                    ""name"": ""OvenHeatIncrease"",
                    ""type"": ""Button"",
                    ""id"": ""1960a2ad-4767-4d45-8d3a-b4eb1b00f626"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f064d54-e646-4b1b-94b7-908e5af7b6a5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OvenHeatIncrease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Pizzaria Controller
        m_PizzariaController = asset.FindActionMap("Pizzaria Controller", throwIfNotFound: true);
        m_PizzariaController_Movement = m_PizzariaController.FindAction("Movement", throwIfNotFound: true);
        m_PizzariaController_Tablet = m_PizzariaController.FindAction("Tablet", throwIfNotFound: true);
        m_PizzariaController_Pause = m_PizzariaController.FindAction("Pause", throwIfNotFound: true);
        m_PizzariaController_Quota = m_PizzariaController.FindAction("Quota", throwIfNotFound: true);
        m_PizzariaController_Loss = m_PizzariaController.FindAction("Loss", throwIfNotFound: true);
        m_PizzariaController_Win = m_PizzariaController.FindAction("Win", throwIfNotFound: true);
        // IngredientMinigame
        m_IngredientMinigame = asset.FindActionMap("IngredientMinigame", throwIfNotFound: true);
        m_IngredientMinigame_W = m_IngredientMinigame.FindAction("W", throwIfNotFound: true);
        m_IngredientMinigame_A = m_IngredientMinigame.FindAction("A", throwIfNotFound: true);
        m_IngredientMinigame_S = m_IngredientMinigame.FindAction("S", throwIfNotFound: true);
        m_IngredientMinigame_D = m_IngredientMinigame.FindAction("D", throwIfNotFound: true);
        // OvenMinigame
        m_OvenMinigame = asset.FindActionMap("OvenMinigame", throwIfNotFound: true);
        m_OvenMinigame_OvenHeatIncrease = m_OvenMinigame.FindAction("OvenHeatIncrease", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Pizzaria Controller
    private readonly InputActionMap m_PizzariaController;
    private List<IPizzariaControllerActions> m_PizzariaControllerActionsCallbackInterfaces = new List<IPizzariaControllerActions>();
    private readonly InputAction m_PizzariaController_Movement;
    private readonly InputAction m_PizzariaController_Tablet;
    private readonly InputAction m_PizzariaController_Pause;
    private readonly InputAction m_PizzariaController_Quota;
    private readonly InputAction m_PizzariaController_Loss;
    private readonly InputAction m_PizzariaController_Win;
    public struct PizzariaControllerActions
    {
        private @Controls m_Wrapper;
        public PizzariaControllerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PizzariaController_Movement;
        public InputAction @Tablet => m_Wrapper.m_PizzariaController_Tablet;
        public InputAction @Pause => m_Wrapper.m_PizzariaController_Pause;
        public InputAction @Quota => m_Wrapper.m_PizzariaController_Quota;
        public InputAction @Loss => m_Wrapper.m_PizzariaController_Loss;
        public InputAction @Win => m_Wrapper.m_PizzariaController_Win;
        public InputActionMap Get() { return m_Wrapper.m_PizzariaController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PizzariaControllerActions set) { return set.Get(); }
        public void AddCallbacks(IPizzariaControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_PizzariaControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PizzariaControllerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Tablet.started += instance.OnTablet;
            @Tablet.performed += instance.OnTablet;
            @Tablet.canceled += instance.OnTablet;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Quota.started += instance.OnQuota;
            @Quota.performed += instance.OnQuota;
            @Quota.canceled += instance.OnQuota;
            @Loss.started += instance.OnLoss;
            @Loss.performed += instance.OnLoss;
            @Loss.canceled += instance.OnLoss;
            @Win.started += instance.OnWin;
            @Win.performed += instance.OnWin;
            @Win.canceled += instance.OnWin;
        }

        private void UnregisterCallbacks(IPizzariaControllerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Tablet.started -= instance.OnTablet;
            @Tablet.performed -= instance.OnTablet;
            @Tablet.canceled -= instance.OnTablet;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Quota.started -= instance.OnQuota;
            @Quota.performed -= instance.OnQuota;
            @Quota.canceled -= instance.OnQuota;
            @Loss.started -= instance.OnLoss;
            @Loss.performed -= instance.OnLoss;
            @Loss.canceled -= instance.OnLoss;
            @Win.started -= instance.OnWin;
            @Win.performed -= instance.OnWin;
            @Win.canceled -= instance.OnWin;
        }

        public void RemoveCallbacks(IPizzariaControllerActions instance)
        {
            if (m_Wrapper.m_PizzariaControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPizzariaControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_PizzariaControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PizzariaControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PizzariaControllerActions @PizzariaController => new PizzariaControllerActions(this);

    // IngredientMinigame
    private readonly InputActionMap m_IngredientMinigame;
    private List<IIngredientMinigameActions> m_IngredientMinigameActionsCallbackInterfaces = new List<IIngredientMinigameActions>();
    private readonly InputAction m_IngredientMinigame_W;
    private readonly InputAction m_IngredientMinigame_A;
    private readonly InputAction m_IngredientMinigame_S;
    private readonly InputAction m_IngredientMinigame_D;
    public struct IngredientMinigameActions
    {
        private @Controls m_Wrapper;
        public IngredientMinigameActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @W => m_Wrapper.m_IngredientMinigame_W;
        public InputAction @A => m_Wrapper.m_IngredientMinigame_A;
        public InputAction @S => m_Wrapper.m_IngredientMinigame_S;
        public InputAction @D => m_Wrapper.m_IngredientMinigame_D;
        public InputActionMap Get() { return m_Wrapper.m_IngredientMinigame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IngredientMinigameActions set) { return set.Get(); }
        public void AddCallbacks(IIngredientMinigameActions instance)
        {
            if (instance == null || m_Wrapper.m_IngredientMinigameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_IngredientMinigameActionsCallbackInterfaces.Add(instance);
            @W.started += instance.OnW;
            @W.performed += instance.OnW;
            @W.canceled += instance.OnW;
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @S.started += instance.OnS;
            @S.performed += instance.OnS;
            @S.canceled += instance.OnS;
            @D.started += instance.OnD;
            @D.performed += instance.OnD;
            @D.canceled += instance.OnD;
        }

        private void UnregisterCallbacks(IIngredientMinigameActions instance)
        {
            @W.started -= instance.OnW;
            @W.performed -= instance.OnW;
            @W.canceled -= instance.OnW;
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @S.started -= instance.OnS;
            @S.performed -= instance.OnS;
            @S.canceled -= instance.OnS;
            @D.started -= instance.OnD;
            @D.performed -= instance.OnD;
            @D.canceled -= instance.OnD;
        }

        public void RemoveCallbacks(IIngredientMinigameActions instance)
        {
            if (m_Wrapper.m_IngredientMinigameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIngredientMinigameActions instance)
        {
            foreach (var item in m_Wrapper.m_IngredientMinigameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_IngredientMinigameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public IngredientMinigameActions @IngredientMinigame => new IngredientMinigameActions(this);

    // OvenMinigame
    private readonly InputActionMap m_OvenMinigame;
    private List<IOvenMinigameActions> m_OvenMinigameActionsCallbackInterfaces = new List<IOvenMinigameActions>();
    private readonly InputAction m_OvenMinigame_OvenHeatIncrease;
    public struct OvenMinigameActions
    {
        private @Controls m_Wrapper;
        public OvenMinigameActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @OvenHeatIncrease => m_Wrapper.m_OvenMinigame_OvenHeatIncrease;
        public InputActionMap Get() { return m_Wrapper.m_OvenMinigame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OvenMinigameActions set) { return set.Get(); }
        public void AddCallbacks(IOvenMinigameActions instance)
        {
            if (instance == null || m_Wrapper.m_OvenMinigameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OvenMinigameActionsCallbackInterfaces.Add(instance);
            @OvenHeatIncrease.started += instance.OnOvenHeatIncrease;
            @OvenHeatIncrease.performed += instance.OnOvenHeatIncrease;
            @OvenHeatIncrease.canceled += instance.OnOvenHeatIncrease;
        }

        private void UnregisterCallbacks(IOvenMinigameActions instance)
        {
            @OvenHeatIncrease.started -= instance.OnOvenHeatIncrease;
            @OvenHeatIncrease.performed -= instance.OnOvenHeatIncrease;
            @OvenHeatIncrease.canceled -= instance.OnOvenHeatIncrease;
        }

        public void RemoveCallbacks(IOvenMinigameActions instance)
        {
            if (m_Wrapper.m_OvenMinigameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOvenMinigameActions instance)
        {
            foreach (var item in m_Wrapper.m_OvenMinigameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OvenMinigameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OvenMinigameActions @OvenMinigame => new OvenMinigameActions(this);
    public interface IPizzariaControllerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnTablet(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnQuota(InputAction.CallbackContext context);
        void OnLoss(InputAction.CallbackContext context);
        void OnWin(InputAction.CallbackContext context);
    }
    public interface IIngredientMinigameActions
    {
        void OnW(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnS(InputAction.CallbackContext context);
        void OnD(InputAction.CallbackContext context);
    }
    public interface IOvenMinigameActions
    {
        void OnOvenHeatIncrease(InputAction.CallbackContext context);
    }
}
